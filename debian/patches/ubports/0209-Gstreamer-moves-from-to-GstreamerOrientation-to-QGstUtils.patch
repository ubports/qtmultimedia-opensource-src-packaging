From: Ratchanan Srirattanamet <ratchanan@ubports.com>
Date: Tue, 15 Oct 2019 16:38:00 +0700
Subject: GStreamer: moves {from,to}GstreamerOrientation to QGstUtils

I modified the video orientation patch to only introduce the shared functions,
so that I can use this function in other place.

Origin: https://code.qt.io/cgit/qt/qtmultimedia.git/commit?id=c877776c354a625373e1dc0f38ac4918da9a056f
Last-updated: 2019-10-15
---

Index: qtmultimedia-opensource-src-packaging/src/gsttools/qgstutils.cpp
===================================================================
--- qtmultimedia-opensource-src-packaging.orig/src/gsttools/qgstutils.cpp
+++ qtmultimedia-opensource-src-packaging/src/gsttools/qgstutils.cpp
@@ -1466,6 +1466,37 @@ QString QGstUtils::fileExtensionForMimeT
     return extension;
 }
 
+#if GST_CHECK_VERSION(0,10,30)
+QVariant QGstUtils::fromGStreamerOrientation(const QVariant &value)
+{
+    // Note gstreamer tokens either describe the counter clockwise rotation of the
+    // image or the clockwise transform to apply to correct the image.  The orientation
+    // value returned is the clockwise rotation of the image.
+    const QString token = value.toString();
+    if (token == QStringLiteral("rotate-90"))
+        return 270;
+    if (token == QStringLiteral("rotate-180"))
+        return 180;
+    if (token == QStringLiteral("rotate-270"))
+        return 90;
+    return 0;
+}
+
+QVariant QGstUtils::toGStreamerOrientation(const QVariant &value)
+{
+    switch (value.toInt()) {
+    case 90:
+        return QStringLiteral("rotate-270");
+    case 180:
+        return QStringLiteral("rotate-180");
+    case 270:
+        return QStringLiteral("rotate-90");
+    default:
+        return QStringLiteral("rotate-0");
+    }
+}
+#endif
+
 void qt_gst_object_ref_sink(gpointer object)
 {
 #if GST_CHECK_VERSION(0,10,24)
Index: qtmultimedia-opensource-src-packaging/src/plugins/gstreamer/camerabin/camerabinmetadata.cpp
===================================================================
--- qtmultimedia-opensource-src-packaging.orig/src/plugins/gstreamer/camerabin/camerabinmetadata.cpp
+++ qtmultimedia-opensource-src-packaging/src/plugins/gstreamer/camerabin/camerabinmetadata.cpp
@@ -43,45 +43,12 @@
 
 #include <gst/gst.h>
 #include <gst/gstversion.h>
+#include <private/qgstutils_p.h>
 
 #include <QDebug>
 
 QT_BEGIN_NAMESPACE
 
-#if GST_CHECK_VERSION(0,10,30)
-
-static QVariant fromGStreamerOrientation(const QVariant &value)
-{
-    // Note gstreamer tokens either describe the counter clockwise rotation of the
-    // image or the clockwise transform to apply to correct the image.  The orientation
-    // value returned is the clockwise rotation of the image.
-    const QString token = value.toString();
-    if (token == QStringLiteral("rotate-90"))
-        return 270;
-    else if (token == QStringLiteral("rotate-180"))
-        return 180;
-    else if (token == QStringLiteral("rotate-270"))
-        return 90;
-    else
-        return 0;
-}
-
-#endif
-
-static QVariant toGStreamerOrientation(const QVariant &value)
-{
-    switch (value.toInt()) {
-    case 90:
-        return QStringLiteral("rotate-270");
-    case 180:
-        return QStringLiteral("rotate-180");
-    case 270:
-        return QStringLiteral("rotate-90");
-    default:
-        return QStringLiteral("rotate-0");
-    }
-}
-
 namespace {
     struct QGStreamerMetaDataKey
     {
@@ -196,7 +163,7 @@ QVariant CameraBinMetaData::metaData(con
 {
 #if GST_CHECK_VERSION(0,10,30)
     if (key == QMediaMetaData::Orientation) {
-        return fromGStreamerOrientation(m_values.value(QByteArray(GST_TAG_IMAGE_ORIENTATION)));
+        return QGstUtils::fromGStreamerOrientation(m_values.value(QByteArray(GST_TAG_IMAGE_ORIENTATION)));
     } else if (key == QMediaMetaData::GPSSpeed) {
         const double metersPerSec = m_values.value(QByteArray(GST_TAG_GEO_LOCATION_MOVEMENT_SPEED)).toDouble();
         return (metersPerSec * 3600) / 1000;
@@ -214,14 +181,16 @@ QVariant CameraBinMetaData::metaData(con
 void CameraBinMetaData::setMetaData(const QString &key, const QVariant &value)
 {
     QVariant correctedValue = value;
+#if GST_CHECK_VERSION(0,10,30)
     if (value.isValid()) {
         if (key == QMediaMetaData::Orientation) {
-            correctedValue = toGStreamerOrientation(value);
+            correctedValue = QGstUtils::toGStreamerOrientation(value);
         } else if (key == QMediaMetaData::GPSSpeed) {
             // kilometers per hour to meters per second.
             correctedValue = (value.toDouble() * 1000) / 3600;
         }
     }
+#endif
 
     const auto keys = *qt_gstreamerMetaDataKeys();
     for (const QGStreamerMetaDataKey &metadataKey : keys) {
Index: qtmultimedia-opensource-src-packaging/src/multimedia/gsttools_headers/qgstutils_p.h
===================================================================
--- qtmultimedia-opensource-src-packaging.orig/src/multimedia/gsttools_headers/qgstutils_p.h
+++ qtmultimedia-opensource-src-packaging/src/multimedia/gsttools_headers/qgstutils_p.h
@@ -147,6 +147,12 @@ namespace QGstUtils {
     QPair<qreal, qreal> structureFrameRateRange(const GstStructure *s);
 
     QString fileExtensionForMimeType(const QString &mimeType);
+
+#if GST_CHECK_VERSION(0,10,30)
+    QVariant fromGStreamerOrientation(const QVariant &value);
+    QVariant toGStreamerOrientation(const QVariant &value);
+#endif
+
 }
 
 void qt_gst_object_ref_sink(gpointer object);
